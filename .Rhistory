len(e)
e[-1]
a.coord
len(a.coord)
class Individuo():
agente_id = 0
def __init__(self, x, are):
cont= range(x.shape[0])
i= rd.choice(cont)
Individuo.agente_id += 1
self.sp= x.iloc[i,0]
self.lifestage= "Adult"
self.sex= rd.choice(["M","F"])
self.mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[rd.choice(range(are[0])),
rd.choice(range(are[1]))]]
#self.lat= 0
#self.long= 0
self.inges= (self.mass * 10.7)**0.703
self.tbm= (self.mass * 4.10)**0.751
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
a= Individuo(dad, [2794, 672])
len(a.coord)
a.coord
a.coord[-1]
a.coord
a.coord.append([2794, 672])
a.coord
a.coord[0]
a.coord[1]
a.coord[-1]
a= Individuo(dad, [2794, 672])
a.coord
a= Individuo(dad, [2794, 672])
a.coord
a.coord
a.coord[-1]
a.coord[-1][0]
bn2[0,a.coord[-1]]
a.coord[-1]
bn2[0,a.coord[-1][0],a.coord[-1],1]
a.coord[-1][0]
bn2[0,a.coord[-1][0],a.coord[-1],1]]
bn2[0,a.coord[-1][0],a.coord[-1][1]]
a.coord[-1]
a.coord[-1][0]
a.coord[-1][1]
lat= a.coord[-1][0]
lon= a.coord[-1][1]
bn2[0,lat,lon]
2* 10.7 ** 0.703
2* (10.7 ** 0.703)
(2* 10.7) ** 0.703
2*(10.7**0.703)
2*10.7**0.703
eqtbm=[0.044,0.634]
a
a
a.agente_id
a.mass
eqtbm
eqtbm[0]
eqtbm[1]
a.mass*eqtbm[0]**eqtbm[1]
a.coord[-1]
a.coord
a.coord.append([2794, 672])
a.coord
a.coord[-1]
class Individuo():
agente_id = 0
def __init__(self, x,eqintake, eqtbm,eqhrs,are):
cont= range(x.shape[0])
i= rd.choice(cont)
Individuo.agente_id += 1
self.sp= x.iloc[i,0]
self.lifestage= "Adult"
self.sex= rd.choice(["M","F"])
self.mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[rd.choice(range(are[0])),
rd.choice(range(are[1]))]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
def curcoord(self):
self.coord[-1]
a= Individuo(dad, [2794, 672])
tam= [2794, 672]
a= [10.7,0.703]
b= [0.044, 0.634]
c= [943.5,1.055]
a= Individuo(dad, )
a= Individuo(dad,a,b,c,tam )
a.curcoord
a.curcoord()
class Individuo():
agente_id = 0
def __init__(self, x,eqintake, eqtbm,eqhrs,are):
cont= range(x.shape[0])
i= rd.choice(cont)
Individuo.agente_id += 1
self.sp= x.iloc[i,0]
self.lifestage= "Adult"
self.sex= rd.choice(["M","F"])
self.mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[rd.choice(range(are[0])),
rd.choice(range(are[1]))]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
def curcoord(self):
return(self.coord[-1])
a= Individuo(dad,a,b,c,tam )
class Individuo():
agente_id = 0
def __init__(self, x,eqintake, eqtbm,eqhrs,are):
cont= range(x.shape[0])
i= rd.choice(cont)
Individuo.agente_id += 1
self.sp= x.iloc[i,0]
self.lifestage= "Adult"
self.sex= rd.choice(["M","F"])
self.mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[rd.choice(range(are[0])),
rd.choice(range(are[1]))]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
def curcoord(self):
return(self.coord[-1])
a= Individuo(dad,a,b,c,tam)
Individuo(dad,a,b,c,tam)
class Individuo():
agente_id = 0
def __init__(self, x,eqintake, eqtbm,eqhrs,are):
cont= range(x.shape[0])
i= rd.choice(cont)
Individuo.agente_id += 1
self.sp= x.iloc[i,0]
self.lifestage= "Adult"
self.sex= rd.choice(["M","F"])
self.mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[rd.choice(range(are[0])),
rd.choice(range(are[1]))]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
def curcoord(self):
self.coord[-1]
a= Individuo(dad,a,b,c,tam)
a
class Individuo():
agente_id = 0
def __init__(self, x,eqintake, eqtbm,eqhrs,are):
cont= range(x.shape[0])
i= rd.choice(cont)
Individuo.agente_id += 1
self.sp= x.iloc[i,0]
self.lifestage= "Adult"
self.sex= rd.choice(["M","F"])
self.mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[rd.choice(range(are[0])),
rd.choice(range(are[1]))]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
Individuo(dad,a,b,c,tam)
class Individuo():
agente_id = 0
def __init__(self, x,eqintake, eqtbm,eqhrs,are):
cont= range(x.shape[0])
i= rd.choice(cont)
Individuo.agente_id += 1
self.sp= x.iloc[i,0]
self.lifestage= "Adult"
self.sex= rd.choice(["M","F"])
self.mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[rd.choice(range(are[0])),
rd.choice(range(are[1]))]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
Individuo(dad,a,b,c,tam)
tam
a
b
c
a= [10.7,0.703]
a= Individuo(dad,a,b,c,tam)
a
tam= [2794, 672]
a= [10.7,0.703]
b= [0.044, 0.634]
c= [943.5,1.055]
ag= Individuo(dad,a,b,c,tam)
ag.coord[-1]
dad.shape
dad.head()
dad.head(2)
x=dad
range(x.shape[0])
range(x.shape)
range(x.shape[0])
dad.shape
cont= range(x.shape[0])
i= rd.choice(cont)
i
cont
x.shape[0]
i
x.iloc[i,0]
x.iloc[i,2]
x.iloc[:,2]
sex= rd.choice(["M","F"])
sex
rd.choice(["M","F"])
rd.choice(["M","F"])
rd.choice(["M","F"])
rd.choice(["M","F"])
rd.choice(["M","F"])
rd.choice(["M","F"])
rd.choice(["M","F"])
rd.choice(["M","F"])
[[],[],[]]
pd.DataFrame(columns= ["sp","sex","mass"])
teste= pd.DataFrame(columns= ["sp","sex","mass"])
[sp,sex,mass]
sp= x.iloc[i,0]
sex= rd.choice(["M","F"])
mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
sp
[sp,sex,mass]
teste.add([sp,sex,mass],axis= "rows")
teste.append([sp,sex,mass],axis= "rows")
teste.append([sp,sex,mass])
[sp,sex,mass]
teste= pd.DataFrame(columns= ["sp","sex","mass"])
teste
[sp,sex,mass]
teste.loc[0,:]= [sp,sex,mass]
teste
cont= range(x.shape[0])
i= rd.choice(cont)
sp= x.iloc[i,0]
sex= rd.choice(["M","F"])
mass= rd.gauss(x.iloc[i,1],x.iloc[i,2] )
teste.loc[1,:]= [sp,sex,mass]
teste.loc
teste
x.shape[0]
range(x.shape[0])
rd.choice(cont)
cont
rd.choice(cont)
rd.choice(cont)
i
i= rd.choice(cont)
i
x.iloc[i,0]
n0= 10
Community= pd.DataFrame(columns= ["sp","sex","mass"])
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
Community.loc[cont1,:]= [C_sp,C_sex,C_mass]
cont1 += 1
n0= 10
Community
Community= pd.DataFrame(columns= ["sp","sex","mass"])
Community
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
Community.loc[cont1,:]= [C_sp,C_sex,C_mass]
cont1 += 1
Community
Community.head(2)
Community
Community.iloc[0,:]
[Community.iloc[0,:]]
Community.iloc[0,0]
Community.iloc[0,1]
Community.iloc[0,2]
Community.iloc[0,[0,1,2]]
Community= [[]]
Community
cont1= 0
Community= []
a1= []
a1.append([1,2])
a1
n0= 10
Community= []
cont1= 0
are
Community= []
are= [2794, 672]
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
lat= rd.choice(range(are[0]))
lon= rd.choice(range(are[1]))
Community.append(cont1)= [C_sp,C_sex,C_mass,lat,lon]
cont1 += 1
Community= []
are= [2794, 672]
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
lat= rd.choice(range(are[0]))
lon= rd.choice(range(are[1]))
Community.append(cont1)= [C_sp,C_sex,C_mass,lat,lon]
cont1 += 1
Community= []
are= [2794, 672]
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
lat= rd.choice(range(are[0]))
lon= rd.choice(range(are[1]))
Community.append(cont1)= [C_sp,C_sex,C_mass,lat,lon]
cont1 += 1
Community= pd.DataFrame(columns= ["sp","sex","mass"])
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
Community.loc[cont1,:]= [C_sp,C_sex,C_mass]
cont1 += 1
Community= []
are= [2794, 672]
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
lat= rd.choice(range(are[0]))
lon= rd.choice(range(are[1]))
Community.append(cont1)= [C_sp,C_sex,C_mass,lat,lon]
cont1 += 1
Community= []
are= [2794, 672]
cont1= 0
while (cont1 < n0):
nsp= range(x.shape[0])
i_sp= rd.choice(nsp)
C_sp= x.iloc[i_sp,0]
C_sex= rd.choice(["M","F"])
C_mass= rd.gauss(x.iloc[i_sp,1],x.iloc[i_sp,2])
lat= rd.choice(range(are[0]))
lon= rd.choice(range(are[1]))
Community.append([C_sp,C_sex,C_mass,lat,lon])
cont1 += 1
Community
Community[0]
Community[[3,4]]
Community[3,4]
Community[3]
beta= Community[3]
beta
beta[[3,4]]
beta[3]
beta[3,4]
beta[3]
beta[4]
beta2= [[beta[3],beta[4]]]
beta2
class Individuo():
agente_id = 0
def __init__(self, x,eqintake,eqtbm,eqhrs):
Individuo.agente_id += 1
self.sp= x[0]
self.lifestage= "Adult"
self.sex= x[1]
self.mass= x[2]
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[x[3],x[4]]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
def Rallocation:
pass
class Individuo():
agente_id = 0
def __init__(self, x,eqintake,eqtbm,eqhrs):
Individuo.agente_id += 1
self.sp= x[0]
self.lifestage= "Adult"
self.sex= x[1]
self.mass= x[2]
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[x[3],x[4]]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
Community
Community[0]
dad= Community[0]
tam= [2794, 672]
a= [10.7,0.703]
b= [0.044, 0.634]
c= [943.5,1.055]
ag= Individuo(dad,a,b,c)
ag.coord
dad
ag.sp
ag.sex
ag.hrs
ag.mass
ag.tbm
pd.DataFrame(Community, columns= ["Sp", "Sex", "Mass", "lat", "long"])
class Individuo():
agente_id = 0
def __init__(self, x,eqintake,eqtbm,eqhrs):
Individuo.agente_id += 1
self.sp= x[0]
self.lifestage= "Adult"
self.sex= x[1]
self.mass= x[2]
self.manuenergy= 0
self.movienergy= 0
self.repenergy= 0
self.coord= [[x[3],x[4]]]
self.intake= self.mass*eqintake[0]**eqintake[1]
self.tbm= self.mass*eqtbm[0]**eqtbm[1]
self.hrs= self.mass*eqhrs[0]**eqhrs[1]
self.id = Individuo.agente_id
def __repr__(self):
return f"{self.id}"
def E_Allocation(self):
pass
a= [10.7,0.703]
b= [0.044, 0.634]
c= [943.5,1.055]
ag= Individuo(dad,a,b,c)
ag
